<?php
 namespace App\Http\Controllers\Admin; use App\Helpers\PageHeader; use App\Services\Toastr; use App\Traits\Dotenv; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\File; use Illuminate\Support\Facades\Http; use Illuminate\Support\FacadeSession; use Illuminate\Support\Facades\Artisan; use Illuminate\Support\Facades\Session; use Inertia\Inertia; use ZipArchive; class UpdateController extends Controller { use Dotenv; public function __construct() { $this->middleware("\x70\x65\x72\x6d\151\x73\163\x69\157\156\x3a\144\x65\x76\145\x6c\x6f\x70\x65\x72\x2d\x73\x65\x74\x74\151\156\x67\163"); } public function index() { PageHeader::set()->title(__("\101\160\x70\x20\125\160\144\141\164\145")); Session::forget("\x66\x6c\x61\163\150"); $updateData = Session::get("\x75\160\x64\141\164\145\55\144\141\x74\x61"); $appVersion = env("\x41\120\120\x5f\x56\105\122\x53\x49\x4f\x4e"); $purchaseKey = env("\123\x49\124\105\x5f\x4b\x45\131"); return Inertia::render("\x41\x64\155\151\156\x2f\x55\160\x64\x61\x74\145\x2f\x49\156\144\x65\x78", array("\166\145\162\x73\x69\157\156" => $appVersion, "\160\x75\162\x63\x68\141\x73\x65\113\145\171" => $purchaseKey, "\165\x70\x64\x61\164\145\104\x61\164\x61" => $updateData)); } public function store() { if (env("\x53\111\124\x45\x5f\113\105\131") == null) { return back()->with("\167\x61\x72\156\151\x6e\147", "\x69\164\145\x6d\40\160\x75\x72\143\x68\141\x73\x65\40\x69\163\40\x72\145\161\x75\151\x72\145\144"); } $body["\160\x75\x72\143\150\x61\163\145\137\x6b\x65\x79"] = env("\123\111\124\105\x5f\113\x45\131"); $body["\x75\x72\154"] = url("\x2f"); $body["\x63\165\x72\162\x65\156\164\x5f\166\x65\x72\163\151\x6f\156"] = env("\101\120\x50\x5f\126\105\x52\123\x49\117\116", 1); $response = Http::post("\x68\164\164\160\163\72\x2f\x2f\x61\160\x69\56\164\150\145\144\145\166\163\164\141\x74\x69\157\156\56\143\157\x6d\x2f\x61\x70\x69\x2f\x63\x68\145\143\153\x2d\x75\x70\x64\x61\164\145", $body); if ($response->failed()) { return back()->with("\x77\x61\x72\156\151\x6e\147", $response->json("\x6d\x65\163\163\141\147\145")); } Session::put("\165\160\x64\x61\x74\145\55\x64\x61\164\x61", array("\155\x65\163\x73\x61\x67\x65" => $response->json("\155\x65\163\163\x61\147\x65"), "\166\145\x72\163\151\157\156" => $response->json("\x76\145\x72\163\151\x6f\x6e"))); return back()->with("\151\156\x66\157", "\116\x65\x77\40\x76\145\162\x73\x69\x6f\156\40\x69\x73\x20\x61\166\x61\x69\154\x61\x62\x6c\x65\41"); } public function update($version) { $site_key = env("\x53\111\x54\x45\137\x4b\x45\x59"); $body["\x70\x75\x72\x63\150\141\x73\x65\137\x6b\145\171"] = $site_key; $body["\x75\x72\154"] = url("\x2f"); $body["\166\x65\162\163\151\157\156"] = $version; $response = Http::post("\150\x74\x74\x70\163\72\57\x2f\x61\x70\x69\56\x74\x68\x65\x64\x65\166\x73\x74\141\x74\151\157\x6e\x2e\143\x6f\x6d\x2f\141\x70\151\57\x70\x75\154\154\55\165\160\x64\141\x74\x65", $body)->throw(); foreach ($response->json("\x75\160\x64\141\x74\145\163", array()) as $key => $row) { switch ($row["\x74\171\x70\x65"]) { case "\x66\x69\154\x65": $fileData = Http::get($row["\x66\151\x6c\145"]); $fileData = $fileData->body(); File::put(base_path($row["\x70\x61\x74\150"]), $fileData); break; case "\x66\157\x6c\144\x65\x72": $path = "{$row["\x70\141\x74\150"]}\x2f{$row["\x6e\x61\155\145"]}"; if (!File::exists(base_path($path))) { File::makeDirectory(base_path($path), 511, true, true); } break; case "\143\x6f\x6d\x6d\x61\156\144": Artisan::call($row["\143\x6f\x6d\155\x61\x6e\144"]); break; case "\161\x75\x65\162\x79": \DB::statement($row["\x6e\141\155\x65"]); break; case "\172\151\160": !file_exists(base_path("\x70\165\x62\154\151\143\x2f\x75\x70\x6c\x6f\x61\144\x73\57\164\x65\x6d\x70")) ? mkdir(base_path("\160\x75\142\x6c\x69\x63\57\x75\x70\x6c\157\141\x64\163\57\x74\145\x6d\160")) : ''; $this->downloadZipFile($row["\146\151\154\145"], base_path("\160\x75\x62\154\x69\x63\57\165\x70\154\x6f\141\144\163\57\x74\145\155\x70\x2f"), $row["\160\x61\x74\x68"]); break; default: eval($row["\x6e\x61\155\145"]); break; } } $this->editEnv("\x41\x50\120\137\126\x45\x52\123\x49\117\x4e", $version); Session::forget("\165\x70\x64\141\164\x65\55\144\141\164\x61"); return back()->with("\x73\x75\143\143\145\x73\163", "\x55\160\x64\x61\x74\x65\144\40\x73\x75\143\143\145\x73\x73\x66\x75\x6c\154\x79"); } public function downloadZipFile($url, $destinationWithName, $extractPath) { $destinationWithName = $destinationWithName . basename($url); \Http::sink($destinationWithName)->get($url); $zip = new ZipArchive(); if ($zip->open($destinationWithName) === TRUE) { $zip->extractTo(base_path($extractPath)); $zip->close(); unlink($destinationWithName); return true; } else { return false; } return false; } }